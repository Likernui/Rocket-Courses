from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from decimal import Decimal
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.requests import get_all_courses, get_course_by_id, create_category, get_all_categories, get_category_by_id, get_courses_by_category
from app.database.models import Course, async_session
from app.keyboards import admin_main_kb, cancel_kb, admin_categories_kb
import os
import app.keyboards as kb
from sqlalchemy import select, update, delete, desc
from loguru import logger
from app.database.models import User
from sqlalchemy import func
from app.database.models import Category

admin = Router()

class EditCategoryStates(StatesGroup):
    NAME = State()
    DESCRIPTION = State()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@admin.callback_query(F.data == "manage_categories")
async def manage_categories(callback: CallbackQuery, session: AsyncSession):
    if not is_admin(callback.from_user.id):
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    categories = await get_all_categories(session)
    await callback.message.edit_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        reply_markup=await admin_categories_kb(categories)
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data.startswith("view_category_"))
async def view_category(callback: CallbackQuery, session: AsyncSession):
    category_id = int(callback.data.split("_")[-1])
    category = await get_category_by_id(session, category_id)

    if not category:
        return await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    courses = await get_courses_by_category(session, category_id)
    courses_text = "\n".join(f"‚ñ™Ô∏è {course.title}" for course in courses) if courses else "–ù–µ—Ç –∫—É—Ä—Å–æ–≤"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_category_{category_id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_category_{category_id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data=f"add_course_to_cat_{category.id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_categories")
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìÇ <b>{category.name}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {category.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üìö –ö—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{courses_text}",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data.startswith("delete_category_"))
async def delete_category(callback: CallbackQuery, session: AsyncSession):
    category_id = int(callback.data.split("_")[-1])
    
    category = await get_category_by_id(session, category_id)
    if not category:
        return await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    
    await session.delete(category)
    await session.commit()
    
    await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    await manage_categories(callback, session)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data.startswith("edit_category_"))
async def edit_category_start(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[-1])
    await state.update_data(category_id=category_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
        reply_markup=cancel_kb()
    )
    await state.set_state(EditCategoryStates.NAME)

@admin.message(EditCategoryStates.NAME)
async def process_edit_category_name(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    category_id = data['category_id']
    
    if message.text != '-':
        if len(message.text) > 50:
            return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤")
        
        category = await get_category_by_id(session, category_id)
        category.name = message.text
        await session.commit()
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
        reply_markup=cancel_kb()
    )
    await state.set_state(EditCategoryStates.DESCRIPTION)

@admin.message(EditCategoryStates.DESCRIPTION)
async def process_edit_category_desc(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    category_id = data['category_id']
    
    if message.text != '-':
        category = await get_category_by_id(session, category_id)
        category.description = message.text if message.text != '-' else None
        await session.commit()
    
    await message.answer(
        "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=admin_main_kb()
    )
    await state.clear()

class AddCategoryStates(StatesGroup):
    NAME = State()
    DESCRIPTION = State()

@admin.callback_query(F.data == "add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddCategoryStates.NAME)
    await callback.answer()

@admin.message(AddCategoryStates.NAME)
async def process_category_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.update_data(name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddCategoryStates.DESCRIPTION)

@admin.message(AddCategoryStates.DESCRIPTION)
async def process_category_description(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    description = message.text if message.text != '-' else None
    
    try:
        await create_category(session, data['name'], description)
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìÇ {data['name']}\n"
            f"üìù {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}",
            reply_markup=admin_main_kb()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=admin_main_kb()
        )
        print(f"Error creating category: {e}")
    finally:
        await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin.callback_query(F.data.startswith("add_course_to_cat_"))
async def add_course_to_category(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º category_id
        category_id = int(callback.data.split("_")[-1])
        category = await get_category_by_id(session, category_id)

        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return await manage_categories(callback, session)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        await state.update_data(category_id=category_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫—É—Ä—Å–∞
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
            reply_markup=cancel_kb()
        )
        await state.set_state(CourseStates.TITLE)
        await callback.answer()

    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        await manage_categories(callback, session)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
class CourseStates(StatesGroup):
    TITLE = State()
    DESCRIPTION = State()
    PRICE = State()

ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ö–æ–º–∞–Ω–¥–∞ /admin - –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@admin.message(Command("admin"))
async def admin_start(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        reply_markup=admin_main_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin.message(CourseStates.TITLE)
async def process_title(message: Message, state: FSMContext):
    if len(message.text) > 100:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(CourseStates.DESCRIPTION)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@admin.message(CourseStates.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    if len(message.text) > 500:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ú–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=cancel_kb()
    )
    await state.set_state(CourseStates.PRICE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
@admin.message(CourseStates.PRICE)
async def process_price(message: Message, state: FSMContext):
    try:
        price = Decimal(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
        await state.update_data(price=float(price))
        
        data = await state.get_data()
        async with async_session() as session:
            course = Course(
                title=data['title'],
                description=data['description'],
                price=data['price'],
                category_id=data.get('category_id', 1)  # –î–æ–±–∞–≤–ª—è–µ–º category_id
            )
            session.add(course)
            await session.commit()
        
        await message.answer(
            f"‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìö {data['title']}\n"
            f"üíµ {data['price']}‚ÇΩ",
            reply_markup=admin_main_kb()
        )
        await state.clear()
    except:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@admin.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_main_kb()
    )


@admin.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏",
        reply_markup=admin_main_kb()
    )

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–¥–º–∏–Ω–∫–∏

class AddCourseToUserStates(StatesGroup):
    USERNAME = State()
    CATEGORY = State()
    COURSE = State()
    CONFIRM = State()

COURSES_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@admin.callback_query(F.data == "add_course_to_user")
async def start_add_course_to_user(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddCourseToUserStates.USERNAME)
    await callback.answer()


@admin.message(AddCourseToUserStates.USERNAME)
async def process_username(message: Message, state: FSMContext, session: AsyncSession):
    username = message.text.strip().lstrip('@')

    user = await session.execute(
        select(User).where(User.username == username))
    user = user.scalar_one_or_none()

    if not user:
        return await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=cancel_kb()
        )

    await state.update_data(user_id=user.telegram_id, username=username)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = await get_all_categories(session)
    if not categories:
        await state.clear()
        return await message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            reply_markup=admin_main_kb()
        )

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=category.name,
            callback_data=f"addcourse_category_{category.id}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AddCourseToUserStates.CATEGORY)


async def show_courses_page(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    current_page = data['current_page']

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    courses = await session.execute(
        select(Course)
        .offset(current_page * COURSES_PER_PAGE)
        .limit(COURSES_PER_PAGE)
    )
    courses = courses.scalars().all()

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤
    for course in courses:
        builder.button(
            text=f"{course.title[:20]} (ID: {course.id})",  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            callback_data=f"select_course_for_user_{course.id}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="prev_course_page"
        ))
    if current_page < data['total_pages'] - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–î–∞–ª–µ–µ ‚û°Ô∏è",
            callback_data="next_course_page"
        ))

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="admin_cancel"
    ))

    try:
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{data['total_pages']}):",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤",
            reply_markup=admin_main_kb()
        )
        await state.clear()

@admin.callback_query(F.data == "prev_course_page")
async def prev_course_page(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await state.update_data(current_page=data['current_page'] - 1)
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_courses_page(callback.message, session, state)
    await callback.answer()

@admin.callback_query(F.data == "next_course_page")
async def next_course_page(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await state.update_data(current_page=data['current_page'] + 1)
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_courses_page(callback.message, session, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@admin.callback_query(F.data.startswith("addcourse_category_"), AddCourseToUserStates.CATEGORY)
async def select_category(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    category_id = int(callback.data.split("_")[-1])
    await state.update_data(category_id=category_id)

    courses = await session.execute(
        select(Course)
        .where(Course.category_id == category_id)
    )
    courses = courses.scalars().all()

    if not courses:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=f"{course.title} ({course.price}‚ÇΩ)",
            callback_data=f"addcourse_select_{course.id}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="addcourse_back_to_categories")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AddCourseToUserStates.COURSE)
    await callback.answer()


@admin.callback_query(F.data == "addcourse_back_to_categories", AddCourseToUserStates.COURSE)
async def back_to_categories(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    categories = await get_all_categories(session)

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=category.name,
            callback_data=f"addcourse_category_{category.id}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AddCourseToUserStates.CATEGORY)
    await callback.answer()


@admin.callback_query(F.data.startswith("addcourse_select_"), AddCourseToUserStates.COURSE)
async def select_course(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    course_id = int(callback.data.split("_")[-1])
    data = await state.get_data()

    course = await session.get(Course, course_id)

    user = await session.execute(
        select(User).where(User.telegram_id == data['user_id'])
    )
    user = user.scalar_one_or_none()

    if not course or not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—É—Ä—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.purchased_courses and course_id in user.purchased_courses:
        await callback.answer("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å", show_alert=True)
        return

    await state.update_data(course_id=course_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="addcourse_confirm")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"addcourse_category_{course.category_id}")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{data['username']}?\n\n"
        f"üìö –ö—É—Ä—Å: {course.title}\n"
        f"üíµ –¶–µ–Ω–∞: {course.price}‚ÇΩ\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {(await session.get(Category, course.category_id)).name}",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AddCourseToUserStates.CONFIRM)
    await callback.answer()


@admin.callback_query(F.data == "addcourse_confirm", AddCourseToUserStates.CONFIRM)
async def confirm_adding(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    user = await session.execute(
        select(User).where(User.telegram_id == data['user_id'])
    )
    user = user.scalar_one_or_none()

    course = await session.get(Course, data['course_id'])

    if not user or not course:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return

    if user.purchased_courses is None:
        user.purchased_courses = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—É—Ä—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data['course_id'] in user.purchased_courses:
        await callback.answer("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å
    if user.purchased_courses is None:
        user.purchased_courses = [data['course_id']]
    else:
        user.purchased_courses = list(user.purchased_courses) + [data['course_id']]
    await session.commit()

    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            user.telegram_id,
            f"üéâ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—Å!\n\n"
            f"üìö {course.title}\n"
            f"üíµ {course.price}‚ÇΩ\n\n"
            f"–î–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await callback.message.edit_text(
        f"‚úÖ –ö—É—Ä—Å {course.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{data['username']}",
        reply_markup=admin_main_kb()
    )
    await state.clear()
    await callback.answer()

@admin.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_main_kb()
    )
    await callback.answer()