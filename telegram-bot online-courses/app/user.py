from aiogram import Router, F
from aiogram import Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from app.database.requests import set_user, get_course, get_user_profile, get_user_courses, get_all_categories, \
    get_category_by_id, get_courses_by_category
from app.database.models import User
from sqlalchemy import select
from loguru import logger 
from app.database.requests import async_session
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from app.database.models import Course, Category,PendingPayment
from aiogram.types import LabeledPrice
from app.database.models import PendingPayment
import uuid
import os
from dotenv import load_dotenv
import os
import aiohttp
from urllib.parse import quote_plus
from app.database.models import async_session
from uuid import uuid4


user = Router()
@user.callback_query(F.data == 'start')
@user.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    user = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id))
    user = user.scalar_one_or_none()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        session.add(new_user)
        await session.commit()
        await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤!', reply_markup=kb.menu)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if user.username != message.from_user.username:
            user.username = message.from_user.username
            await session.commit()
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup=kb.menu)


@user.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery, session: AsyncSession):
    categories = await get_all_categories(session)
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
            reply_markup=await kb.back_to_menu()
        )
        return
    
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=f"{category.name}", 
            callback_data=f"cat_{category.id}_0"
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤:",
        reply_markup=builder.as_markup()
    )

@user.callback_query(F.data.startswith("cat_"))
async def show_courses_in_category(callback: CallbackQuery, session: AsyncSession):
    try:
        _, category_id, page = callback.data.split("_")
        category_id = int(category_id)
        page = int(page)
        
        category = await get_category_by_id(session, category_id)
        if not category:
            return await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        all_courses = await get_courses_by_category(session, category_id)
        per_page = 10
        total_pages = (len(all_courses) + per_page - 1) // per_page
        page_courses = all_courses[page*per_page : (page+1)*per_page]

        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)
        for course in page_courses:
            builder.row(InlineKeyboardButton(
                text=f"{course.title} - {course.price}‚ÇΩ",
                callback_data=f"course_{course.id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"cat_{category_id}_{page-1}"
            ))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚û°Ô∏è",
                callback_data=f"cat_{category_id}_{page+1}"
            ))
        
        if nav_buttons:
            builder.row(*nav_buttons)
        
        builder.row(InlineKeyboardButton(
            text="üîô –í –∫–∞—Ç–∞–ª–æ–≥",
            callback_data="catalog"
        ))

        await callback.message.edit_text(
            f"<b>{category.name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@user.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!",
        reply_markup=kb.menu
    )

@user.callback_query(F.data.startswith("course_"))
async def show_course(callback: CallbackQuery):
    try:
        async with async_session() as session:
            async with session.begin():
                course_id = int(callback.data.split("_")[1])
                course = await session.get(Course, course_id)
                
                if not course:
                    await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                await session.refresh(course, ['category'])
                
                user = await session.execute(
                    select(User)
                    .where(User.telegram_id == callback.from_user.id)
                )
                user = user.scalar_one_or_none()
                
                has_course = user and course.id in (user.purchased_courses or [])
                
                builder = InlineKeyboardBuilder()
                
                if not has_course:
                    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{course.id}")
                
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_{course.category_id}_0")
                builder.adjust(1)
                
                message_text = (
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {course.category.name}\n\n"
                    f"üìö <b>{course.title}</b>\n"
                    f"üíµ –¶–µ–Ω–∞: {course.price} —Ä—É–±.\n"
                    f"{course.description}"
                )
                
                if has_course:
                    message_text += "\n\n‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç –∫—É—Ä—Å"
                
                await callback.message.edit_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
                
    except Exception as e:
        logger.error(f"Error in show_course: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@user.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    async with async_session() as session:
        async with session.begin():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await session.execute(
                    select(User)
                    .where(User.telegram_id == callback.from_user.id)
                )
                user = user.scalar_one_or_none()
                
                if not user:
                    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
                profile_text = [
                    "üíº <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(user, 'balance'):
                    profile_text.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(user, 'registered_at'):
                    profile_text.append(f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registered_at.strftime('%d.%m.%Y')}\n\n")
                else:
                    profile_text.append("\n")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å—ã
                if hasattr(user, 'purchased_courses') and user.purchased_courses:
                    courses = []
                    for item in user.purchased_courses:
                        if isinstance(item, str):
                            courses.append(f"‚ñ™Ô∏è {item}")
                        elif isinstance(item, int):
                            course = await session.get(Course, item)
                            if course:
                                courses.append(f"‚ñ™Ô∏è {course.title}")
                    
                    if courses:
                        profile_text.append("üìö <b>–í–∞—à–∏ –∫—É—Ä—Å—ã:</b>\n")
                        profile_text.append("\n".join(courses))
                        profile_text.append("\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—É—Ä—Å –≤ –º–µ–Ω—é –Ω–∏–∂–µ")
                    else:
                        profile_text.append("üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
                else:
                    profile_text.append("üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
                builder = InlineKeyboardBuilder()
                
                if hasattr(user, 'purchased_courses') and user.purchased_courses:
                    for item in user.purchased_courses:
                        if isinstance(item, int):
                            course = await session.get(Course, item)
                            if course:
                                builder.button(
                                    text=f"üìö {course.title}",
                                    callback_data=f"courseinfo_{course.id}"
                                )
                        elif isinstance(item, str):
                            # –ò—â–µ–º –∫—É—Ä—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                            course = await session.execute(
                                select(Course)
                                .where(Course.title == item)
                                .limit(1)
                            )
                            course = course.scalar_one_or_none()
                            if course:
                                builder.button(
                                    text=f"üìö {course.title}",
                                    callback_data=f"courseinfo_{course.id}"
                                )
                
                builder.row(InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_menu"
                ))
                
                await callback.message.edit_text(
                    "".join(profile_text),
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
                
            except Exception as e:
                logger.error(f"Error in show_profile: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

@user.callback_query(F.data.startswith("courseinfo_"))
async def show_course_info(callback: CallbackQuery):
    try:
        async with async_session() as session:
            async with session.begin():
                course_id = int(callback.data.split("_")[1])
                course = await session.get(Course, course_id)
                
                if not course:
                    await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ
                message_text = (
                    f"<b>üìö –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {course.title}\n\n"
                    f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{course.description}\n\n"
                    f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {course.link}"
                )
                
                builder = InlineKeyboardBuilder()
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
                
                await callback.message.edit_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup(),
                    disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
                )
                
    except Exception as e:
        logger.error(f"Error in show_course_info: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)



@user.callback_query(F.data.regexp(r"^pay_\d+$"))
async def choose_payment_method(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[1])
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=await kb.payment_options_kb(course_id)
    )

@user.callback_query(F.data.startswith("pay_manager_"))
async def pay_via_manager(callback: CallbackQuery):
    manager_tag = "@rassokhin1"
    await callback.message.edit_text(
        f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã: {manager_tag}",
        reply_markup=await kb.back_to_course_kb(int(callback.data.split("_")[2]))
    )


import uuid

# –í user.py –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∫–æ–¥ (–∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é pay_via_cryptocloud)
import os
import uuid
import requests  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from dotenv import load_dotenv
from requests.exceptions import RequestException
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select

load_dotenv()




API_KEY = os.getenv("CRYPTOCLOUD_API_TOKEN")
SHOP_ID = os.getenv("CRYPTOCLOUD_PUBLIC_KEY")

@user.callback_query(F.data.startswith("pay_cryptocloud_"))
async def pay_via_cryptocloud(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –ë–î
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        payment_uuid = str(uuid.uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
        payment = PendingPayment(
            user_id=user_id,
            course_id=course_id,
            payment_id=payment_uuid,
            status="pending"
        )
        session.add(payment)
        await session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API CryptoCloud
    payload = {
        "amount": float(course.price),
        "shop_id": SHOP_ID,
        "currency": "RUB",
        "order_id": payment_uuid  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à UUID –≤ –∑–∞–∫–∞–∑
    }

    headers = {
        "Authorization": f"Token {API_KEY}",
        "Content-Type": "application/json"
    }

    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoCloud
    async with aiohttp.ClientSession() as http_session:
        async with http_session.post(
            "https://api.cryptocloud.plus/v2/invoice/create",
            json=payload,
            headers=headers
        ) as resp:
            if resp.status != 200:
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return
            data = await resp.json()

    pay_link = data.get("result", {}).get("link")
    if not pay_link:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_link)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_uuid}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"course_{course_id}")]
    ])

    await callback.message.edit_text(
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '{course.title}'</b>\n\n"
        f"–°—É–º–º–∞: <b>{course.price} RUB</b>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@user.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    payment_uuid = callback.data.split("_")[-1]
    success = await verify_payment(payment_uuid, callback.bot)

    if success:
        async with async_session() as session:
            payment = await session.execute(
                select(PendingPayment)
                .where(PendingPayment.payment_id == payment_uuid)
            )
            payment = payment.scalar_one_or_none()
            course = await session.get(Course, payment.course_id)

            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ö—É—Ä—Å '{course.title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É", callback_data=f"courseinfo_{course.id}")]
                ])
            )
    else:
        await callback.answer("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def verify_payment(payment_uuid: str, bot: Bot = None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–¥–∞–µ—Ç –∫—É—Ä—Å"""
    async with async_session() as session:
        payment = await session.execute(
            select(PendingPayment).where(PendingPayment.payment_id == payment_uuid)
        )
        payment = payment.scalar_one_or_none()

        if not payment or payment.status == "paid":
            return False

        # –ó–∞–ø—Ä–æ—Å –∫ CryptoCloud
        headers = {"Authorization": f"Token {API_KEY}", "Content-Type": "application/json"}
        payload = {"uuids": [payment_uuid]}

        async with aiohttp.ClientSession() as http_session:
            async with http_session.post(
                "https://api.cryptocloud.plus/v2/invoice/merchant/info",
                json=payload,
                headers=headers
            ) as resp:
                if resp.status != 200:
                    return False
                data = await resp.json()

        invoice = data.get("result", [{}])
        if len(invoice)==0:
            print(data)
            return False
        else:
            invoice = data.get("result", [{}])[0]
        if invoice.get("status") not in ["paid", "overpaid"]:
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        payment.status = "paid"
        user = await session.get(User, payment.user_id)
        if user.purchased_courses is None:
            user.purchased_courses = []
        if payment.course_id not in user.purchased_courses:
            user.purchased_courses.append(payment.course_id)
        await session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±–æ—Ç)
        if bot:
            try:
                await bot.send_message(
                    user.telegram_id,
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å."
                )
            except:
                pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        return True









